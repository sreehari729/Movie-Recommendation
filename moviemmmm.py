# -*- coding: utf-8 -*-
"""moviemmmm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RUAZuCvqcag1S8vFk0_EasGzJvxTS1CY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os

movies = pd.read_csv('tmdb_5000_movies.csv')
credits = pd.read_csv('tmdb_5000_credits.csv')

movies.head()

credits.head()

movies.shape

credits.shape

movies = movies.merge(credits,on='title')

movies.head(4)

movies.shape

movies.columns

#selecting important columns in the dataset
movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]

movies.head()

movies.shape

#to check the missing value
movies.isnull().sum()

#dropping the null rows
movies.dropna(inplace=True)

movies.isnull().sum()

#to check for duplicated values
movies.duplicated().sum()

movies.iloc[0]['genres']

#converting the string to list
import ast
def convert(text):
    l =[]
    for i in ast.literal_eval(text):
        l.append(i['name'])
    return l

movies['genres']= movies['genres'].apply(convert)

movies.head()

movies['keywords']= movies['keywords'].apply(convert)

movies.head()

def convert_c(text):
    l =[]
    counter=0
    for i in ast.literal_eval(text):
        if counter<3:
            l.append(i['name'])
        counter = counter+1
    return l

movies['cast']= movies['cast'].apply(convert_c)

movies.head(2)

def director(text):
    l =[]
    for i in ast.literal_eval(text):
        if i['job'] == 'Director':
            l.append(i['name'])
            break
    return l

movies['director'] = movies['crew'].apply

movies.head(2)

movies.iloc[0]['overview']

movies['overview'] = movies['overview'].str.split(" ", n=1, expand=False)

movies.sample(4)

movies.iloc[0]['overview']

# now removing space like that

def remove_space(L):
    L1 = []
    for i in L:
        L1.append(i.replace(" ",""))
    return L1

movies['cast'] = movies['cast'].apply(remove_space)
movies['crew'] = movies['crew'].apply(remove_space)
movies['genres'] = movies['genres'].apply(remove_space)
movies['keywords'] = movies['keywords'].apply(remove_space)

# Concatinating
movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head()

movies.iloc[0]['tags']

# droping extra columns
new_data = movies[['movie_id','title','tags']]
new_data.head()

# Converting list to str
new_data['tags'] = new_data['tags'].apply(lambda x: " ".join(x))
new_data.head()

new_data.iloc[0]['tags']

# Converting to lower case
new_data['tags'] = new_data['tags'].apply(lambda x:x.lower())

new_data.head()

new_data.iloc[0]['tags']

new_data.shape

import nltk
from nltk.stem import PorterStemmer

ps = PorterStemmer()

def stems(text):
    T = []

    for i in text.split():
        T.append(ps.stem(i))

    return " ".join(T)

new_data['tags'] = new_data['tags'].apply(stems)

new_data.iloc[0]['tags']

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')

vector = cv.fit_transform(new_data['tags']).toarray()

vector[0]

vector.shape

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vector)

similarity.shape

new_data[new_data['title'] == 'The Lego Movie'].index[0]

def recommend(movie):
    index = new_data[new_data['title'] == movie].index[0]
    distances = sorted(list(enumerate(similarity[index])),reverse=True,key = lambda x: x[1])
    for i in distances[1:6]:
        print(new_data.iloc[i[0]].title)

recommend('Spider-Man 2')

recommend('The Dark Knight Rises')

import pickle
file = 'movies.pkl'
pickle.dump(new_data,open(file,'wb'))

file2 = 'similarity.pkl'
pickle.dump(similarity,open(file2,'wb'))

